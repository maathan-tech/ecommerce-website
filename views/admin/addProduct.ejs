<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Add Product</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .cropper-container { max-width: 800px; margin: 0 auto; }
        .cropped-images-preview {
            display: flex; flex-wrap: wrap; justify-content: center; margin-top: 1rem;
        }
        .cropped-images-preview img {
            width: 100px; height: 100px; object-fit: cover; margin: 0.5rem; position: relative;
        }
    </style>
</head>
<body>
    <div class="container my-5">
        <h2 class="mb-4">Add Product</h2>
        
        <form id="addProductForm" action="/admin/products/addproduct" method="post" enctype="multipart/form-data">
            <!-- Basic Input Fields -->
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <input type="number" class="form-control" id="price" name="price" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <select class="form-select" id="category" name="category" required>
                    <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                    <% }) %>
                </select>
            </div>
            <div class="mb-3">
                <label for="stock" class="form-label">Stock:</label>
                <input type="number" class="form-control" id="stock" name="stock" required>
            </div>

            <!-- New Image Upload & Cropping -->
            <div class="mb-3">
                <label for="imageUpload" class="form-label">Upload Images (Min 3):</label>
                <input type="file" class="form-control" id="imageUpload" name="images" accept="image/*" multiple required>
            </div>

            <!-- Cropper Container -->
            <div class="cropper-container mb-3">
                <img id="croppingImage" style="display: none;" alt="Image to crop">
                <button type="button" class="btn btn-primary" id="cropButton" style="display: none;">Crop Image</button>
            </div>

            <!-- Cropped Images Preview -->
            <div class="cropped-images-preview" id="croppedImagesPreview"></div>
            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

        document.addEventListener("DOMContentLoaded",()=>{
            fetch('/admin/products/addproduct')
                .then(response =>{
                    if(!response.ok){
                        return response.json().then(data =>{
                            Swal.fire({
                                icon:'error',
                                title:'Oops...',
                                text:data.message || 'An unexpected error occur!',
                                confirmButtonText:'OK'
                            })
                        })
                    }
                }).catch(err =>{
                    console.error(err)
                    Swal.fire({
                        icon:'error',
                        title:'Internal server error',
                        text:'Something went wrong',
                        confirmButtonText:'OK'
                    })
                })
        })


        //validation
        document.getElementById('addProductForm').addEventListener('submit', async function (event) {
    event.preventDefault();

    const name = document.getElementById('name').value.trim();
    const price = document.getElementById('price').value;
    const description = document.getElementById('description').value.trim();
    const category = document.getElementById('category').value;
    const stock = document.getElementById('stock').value;

    // Function to show SweetAlert
    const showAlert = (title, text) => {
        Swal.fire({
            title: title,
            text: text,
            icon: 'warning',
            confirmButtonText: 'OK'
        });
    };

    // Validation
    if (!name) {
        showAlert('Validation Error', 'Please enter the product name.');
        return;
    }
    if (!price || price <= 10) {
        showAlert('Validation Error', 'Please enter a valid price greater than 10.');
        return;
    }
    if (description.length < 10) {
        showAlert('Validation Error', 'Description must be at least 10 characters long.');
        return;
    }
    if (!category) {
        showAlert('Validation Error', 'Please select a category.');
        return;
    }
    if (!stock || stock < 0) {
        showAlert('Validation Error', 'Please enter a valid stock quantity (0 or more).');
        return;
    }
    if (croppedImages.length < 3) {
        showAlert('Validation Error', 'Please upload and crop at least 3 images.');
        return;
    }

    // Create FormData for the AJAX request
    const formData = new FormData();
    formData.append('name', name);
    formData.append('price', price);
    formData.append('description', description);
    formData.append('category', category);
    formData.append('stock', stock);

    croppedImages.forEach((image, index) => {
        formData.append(`images`, image, `image_${index + 1}.jpg`);
    });

    try {
        const response = await fetch('/admin/products/addproduct', {
            method: 'POST',
            body: formData,
        });

        const result = await response.json();

        if (response.ok) {
            Swal.fire({
                title: 'Success',
                text: 'Product added successfully!',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/admin/products'
            });
        } else {
            Swal.fire({
                title: 'Error',
                text: result.message || 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        Swal.fire({
            title: 'Error',
            text: 'Failed to add product. Please check your network connection.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
});

// JavaScript logic for cropping images
let cropper;
const imageUpload = document.getElementById('imageUpload');
const croppingImage = document.getElementById('croppingImage');
const cropButton = document.getElementById('cropButton');
const croppedImagesPreview = document.getElementById('croppedImagesPreview');

const croppedImages = [];
let filesQueue = [];

// Handle image upload
imageUpload.addEventListener('change', (event) => {
    filesQueue = Array.from(event.target.files);
    loadNextImage();
});

// Load the next image for cropping
function loadNextImage() {
    if (filesQueue.length === 0) {
        croppingImage.style.display = 'none';
        cropButton.style.display = 'none';
        return;
    }

    const file = filesQueue.shift();
    const reader = new FileReader();
    reader.onload = (e) => {
        croppingImage.src = e.target.result;
        croppingImage.style.display = 'block';
        cropButton.style.display = 'inline-block';

        if (cropper) cropper.destroy();
        cropper = new Cropper(croppingImage, { aspectRatio: 1, viewMode: 1 });
    };
    reader.readAsDataURL(file);
}

// Crop the image and add it to the preview
cropButton.addEventListener('click', () => {
    if (cropper) {
        cropper.getCroppedCanvas({ width: 500, height: 500 }).toBlob((blob) => {
            const url = URL.createObjectURL(blob);
            const imgElement = document.createElement('img');
            imgElement.src = url;
            imgElement.style.maxWidth = '100px';
            imgElement.style.margin = '5px';
            croppedImagesPreview.appendChild(imgElement);

            croppedImages.push(blob);
            loadNextImage();
        });
    }
});
    </script>
</body>
</html>
