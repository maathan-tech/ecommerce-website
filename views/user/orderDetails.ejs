<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Reset styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* Global styles */
    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      font-size: 16px;
      line-height: 1.6;
      color: #1a1a1a;
      background-color: #f5f7fa;
    }

    header {
      background-color: #ffffff;
      border-bottom: 1px solid #e5e7eb;
      padding: 1.25rem 2rem;
      position: sticky;
      top: 0;
      z-index: 100;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    .order-details {
      max-width: 1000px;
      margin: 2.5rem auto;
      padding: 2.5rem;
      background-color: #ffffff;
      border-radius: 16px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .order-details h1 {
      font-size: 2rem;
      font-weight: 700;
      color: #111827;
      margin-bottom: 2rem;
      border-bottom: 2px solid #e5e7eb;
      padding-bottom: 1rem;
    }

    .order-details h2 {
      font-size: 1.25rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 1.25rem;
    }

    .shipping-address,
    .order-info,
    .products {
      background-color: #f9fafb;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border: 1px solid #e5e7eb;
    }

    .shipping-address p,
    .order-info p {
      color: #4b5563;
      margin-bottom: 0.5rem;
    }

    .product-item {
      display: flex;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid #e5e7eb;
      gap: 2rem;
    }

    .product-item:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }

    .product-image {
      width: 120px;
      flex-shrink: 0;
    }

    .product-image img {
      width: 100%;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .product-details h3 {
      font-size: 1.1rem;
      font-weight: 600;
      color: #111827;
      margin-bottom: 0.75rem;
    }

    .product-details p {
      color: #6b7280;
      margin-bottom: 0.5rem;
    }

    .order-status {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 3rem 0;
      position: relative;
      padding: 0 2rem;
    }

    .status-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
      position: relative;
      z-index: 1;
    }

    .status-icon {
      width: 2.5rem;
      height: 2.5rem;
      border-radius: 50%;
      background-color: #e5e7eb;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .status-item span {
      font-size: 0.875rem;
      font-weight: 500;
      white-space: nowrap;
    }

    .status-item.active .status-icon {
      background-color: #10b981;
      box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.2);
    }

    .status-item.active span {
      color: #10b981;
      font-weight: 600;
    }

    .status-item.cancelled .status-icon {
      background-color: #ef4444;
      box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.2);
    }

    .status-item.cancelled span {
      color: #ef4444;
    }

    .actions {
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
    }

    .cancel-order,.return-order,
    .download-invoice-btn {
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
    }

    .cancel-order {
      background-color: #fee2e2;
      color: #dc2626;
    }

    .cancel-order:hover {
      background-color: #fecaca;
    }

    .return-order {
      background-color: #10b981;
      color: white;
    }

    .download-invoice-btn {
      background-color: #10b981;
      color: white;
    }

    .download-invoice-btn:hover {
      background-color: #059669;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
      .order-details {
        margin: 1rem;
        padding: 1.5rem;
        border-radius: 12px;
      }

      .order-status {
        flex-direction: column;
        gap: 2rem;
        margin: 2rem 0;
      }

      .product-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .product-image {
        width: 100%;
        max-width: 200px;
      }

      .actions {
        flex-direction: column;
      }

      .cancel-order,
      .download-invoice-btn {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <header>
    <a class="navbar-brand" href="/">
      <img src="/images/HarvestBazar1.png" alt="HarvestBazar" height="40">
    </a>
  </header>

  <div class="order-details">
    <h1>Order Details</h1>

    <!-- Shipping Address -->
    <div class="shipping-address">
      <h2>SHIPPING ADDRESS</h2>
      <p><%= order.shippingAddress.firstName %> <%= order.shippingAddress.lastName %></p>
      <p><%= order.shippingAddress.street %>, <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.zipcode %></p>
      <p><%= order.shippingAddress.email %></p>
      <p><%= order.shippingAddress.mobile %></p>
    </div>

    <!-- Order Information -->
    <div class="order-info">
      <h2>ORDER ID: <%= order._id %></h2>
      <p>Date: <%= order.createdAt.toLocaleDateString() %></p>
      <p>PAYMENT METHOD: <%= order.paymentMethod %></p>

      <% if(order.paymentMethod === 'Online-payment'){ %>
        <p>PAYMENT STATUS: <%=order.paymentStatus %></p>
      <% } %>

      <p>Subtotal: ₹<%= order.totalPrice.toFixed(2) %></p>
      <p>Discount: ₹<%= order.discountAmount.toFixed(2) %></p>
      <p>Shipping: ₹<%= order.shipping %></p>
      <p class="fw-bold">Total: ₹<%= order.totalPriceAfterDiscount.toFixed(2)  %></p>

      <% if(order.paymentStatus === 'pending' && order.paymentMethod === 'Online-payment' && order.status === 'pending'){ %>
        <p class="text-warning fw-bold">Complete your payment to confirm Order</p>
        <button class="pay-now btn btn-success fw-bold" data-order-id="<%= order._id %>">Pay ₹<%= order.totalPriceAfterDiscount.toFixed(2) %></button>
      <% } %>
  
    </div>
    <% if(order.returnStatus === 'pending' || order.returnStatus === 'approved' || order.returnStatus === 'rejected' ){ %>
      <p class="text-danger">Return <%= order.returnStatus %></p>
 <% } %>


 

    <!-- Order Status -->
    <div class="order-status">
     
      <!-- Order Placed -->
      <div class="status-item <%= order.status === 'pending' || order.status === 'paid' || order.status === 'shipped' || order.status === 'Delivered' || order.status === 'Returned' ? 'active' : (order.status === 'cancelled' ? 'cancelled' : 'muted') %>">
          <div class="status-icon"></div>
          <span>Order received</span>
      </div>
  
      <!-- Processing -->
      <div class="status-item <%= order.status === 'paid'|| order.status === 'shipped' || order.status === 'Delivered' || order.status === 'Returned' ? 'active' : (order.status === 'cancelled' ? 'cancelled' : 'muted') %>">
          <div class="status-icon"></div>
          <span>Processing</span>
      </div>
  
      <!-- Shipped -->
      <div class="status-item <%= order.status === 'shipped' || order.status === 'Delivered' || order.status === 'Returned'? 'active' : 'muted' %>">
          <div class="status-icon"></div>
          <span>Shipped</span>
      </div>
  
      <!-- Delivered -->
      <div class="status-item <%= order.status === 'Delivered' || order.status === 'Returned' ? 'active' : 'muted' %>">
          <div class="status-icon"></div>
          <span>Delivered</span>
      </div>
  
      <!-- Cancelled -->
      <% if (order.status === 'Cancelled') { %>
          <div class="status-item cancelled">
              <div class="status-icon"></div>
              <span>Cancelled</span>
          </div>
      <% } else if(order.status === 'Returned') { %>
        <div class="status-item cancelled">
          <div class="status-icon"></div>
          <span>Returned</span>
      </div>
      <% } %>
  </div>

    <!-- Products List -->
    <div class="products">
      <% order.items.forEach((item)=> { %>
        <div class="product-item">
            <div class="product-image">
                <% if (item.product.images && item.product.images.length > 0) { %>
                    <img src="<%= item.product.images[0] %>" alt="<%= item.product.name %>">
                <% } else { %>
                    <img src="/path/to/default-image.jpg" alt="No image available">
                <% } %>
            </div>
            <div class="product-details">
                <h3><%= item.product.name %></h3>
                <p>Original Price: <del class="text-muted"><%= item.product.price %>/kg</del></p>
                <p>Price: ₹<%= item.price.toFixed(2) %></p>
                <p>Quantity: <%= item.quantity %></p>
                <p>Subtotal: ₹<%= item.price  * item.quantity %></p>
            </div>
        </div>
    <% }); %>
    
    </div>

    <!-- Actions -->
    <div class="actions">
      <% if(order.status === 'Delivered' && order.returnStatus === 'not-request'){ %>
        <button class="return-order" type="button" onclick="confirmReturnOrder('<%= order._id %>')" >Return Order</button>
    <% } else if(order.status === 'pending' || order.status === 'paid') { %>
        <button class="cancel-order " onclick="confirmCancelOrder('<%= order._id %>')">Cancel Order</button>
    <% } %>

    <% if(order.status === 'Delivered'){ %>
    <button class="download-invoice-btn" data-order-id="<%= order._id %>">
      Invoice
  </button>
  <% } %>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>

document.addEventListener('DOMContentLoaded',()=>{
  const orderId = window.location.pathname.split('/')[3]
  fetch(`/orders/orderDetails/${orderId}`)
      .then(response =>{
        if(!response.ok){
          return response.json().then(data =>{
            Swal.fire({
              icon:'error',
              title:'Oops...',
              text:data.message || 'An unexpected error occured!',
              confirmButtonText:'OK'
            })
          })
        }
      }).catch(err =>{
        Swal.fire({
          icon:'error',
          title:'Network error',
          text:'Check your connection and try again',
          confirmButtonText:'OK'
        })
      })
})


function confirmCancelOrder(orderId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, cancel it!",
        cancelButtonText: "No, keep it",
    }).then((result) => {
        if (result.isConfirmed) {
            
            fetch(`/orders/orderDetails/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire("Cancelled!", "Your order has been cancelled.", "success").then(() => {
                        location.reload(); // Reload to show the updated status
                    });
                } else {
                    Swal.fire("Error!", data.message, "error");
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                Swal.fire("Error!", "Unable to cancel the order.", "error");
            });
        }
    });
}

//return order
function confirmReturnOrder(orderId) {
    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to return this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, return it!",
        cancelButtonText: "No, keep it",
    }).then((result) => {
        if (result.isConfirmed) {
            // Prompt the user to enter a reason for return
            Swal.fire({
                title: 'Reason for Return',
                input: 'textarea',
                inputLabel: 'Please provide a reason for returning this product:',
                inputPlaceholder: 'Enter your reason here...',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
            }).then((reasonResult) => {
                if (reasonResult.isConfirmed) {
                    const reason = reasonResult.value;
                     
                      
                    
                    fetch(`/orders/orderDetails/${orderId}/return`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason }) 
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire("Returned!", "Your order return request has been submitted.", "success").then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire("Error!", data.message, "error");
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                        Swal.fire("Error!", "Unable to return the order.", "error");
                    });
                }
            });
        }
    });
}

//download invoice
document.querySelectorAll('.download-invoice-btn').forEach((button)=>{
  button.addEventListener('click',(event)=>{
    const orderId = event.target.getAttribute('data-order-id')

    fetch(`/orders/${orderId}/download-invoice`,{
      method:'GET',
      headers:{
        'Content-Type':'application/json'
      }
    })
    .then((response)=>{
      if(response.ok){
        return response.blob()
      }else{
        throw new Error('failed to download invoice')
      }
    }).then((blob)=>{
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `Invoice_${orderId}.pdf`
      a.click()
      window.URL.revokeObjectURL(url)
    })
    .catch((error)=>{
      console.error(error);
      Swal.fire({
        icon:'error',
        title:'Error',
        text:'Failed to download invoice , please try again later'
      })
      
    })
  })
})


//retry payment
document.addEventListener("DOMContentLoaded",()=>{
  document.querySelector(".pay-now")?.addEventListener("click",async function() {
    const orderId = this.getAttribute('data-order-id')

    try {
      
      const response = await fetch(`/checkout/retry-payment/${orderId}`,{
        method:'GET',
      })
      const data = await response.json()

      if(data.success){
        const options = {
          key: data.razorpay,
          amount: data.amount,
          currency: data.currency,
          name:"HARVEST BAZAR",
          description:"Order payment",
          order_id: data.razorpayOrderId,
          handler: function(response){
            fetch('/checkout/verify-payment',{
              method:'POST',
              headers:{
                'Content-Type':'application/json'
              },
              body: JSON.stringify({
                razorpayPaymentId: response.razorpay_payment_id,
                razorpayOrderId: response.razorpay_order_id,
                razorpaySignature: response.razorpay_signature,
              })
            })
            .then(res => res.json())
            .then(data => {
              if(data.success){
                Swal.fire({
                  icon:'success',
                  title:'Payment Successful',
                  text:'Your order has been confirmed!',
                  confirmButtonText:'OK',
                }).then(()=>{
                  window.location.reload()
                })
              } else{
                Swal.fire({
                  icon:'error',
                  title:'Payment Failed',
                  text: data.message,
                  confirmButtonText:"try again"
                })
              }
            })
          },
          theme:{
            color:"#3399cc",
          },
        }
        const rzp = new Razorpay(options)
        rzp.open()
        rzp.on('payment.failed', function (response) {
          Swal.fire({
              icon: 'error',
              title: 'Payment Failed',
              text: `Reason: ${response.error.reason}. Please try again.`,
              confirmButtonText: 'Try Again'
          }).then(()=>{
              window.location.reload()
          })
      });
      }else{
        Swal.fire({
          icon:'error',
          title:'Error',
          text:data.message,
          confirmButtonText:'OK'
        })
      }
    } catch (error) {
      console.error('error initiating payment:',error)
      Swal.fire({
        icon:'error',
        title:'Error',
        text:'something went wrong. please try again later',
        confirmButtonText:"OK"
      })
    }
    
  })
})
</script>
</body>
</html>
